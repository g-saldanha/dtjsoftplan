import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { fetchLogin, fetchLogout } from './authAPI';
import { IAuth } from './IAuth';

export interface AuthState {
  login: string;
  senha: string;
  loading: boolean;
  error: string | undefined;
}

const initialState: AuthState = {
  login: '',
  senha: '',
  loading: false,
  error: undefined,
};

export const loginAsync = createAsyncThunk('auth/fetchLogin', async (auth: IAuth) => {
  const response = await fetchLogin(auth);
  // The value we return becomes the `fulfilled` action payload
  return response.data;
});
export const loginSlice = createSlice({
  name: 'login',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    setLogin: (state, action: PayloadAction<IAuth>) => {
      state.login = action.payload.login;
      state.senha = action.payload.senha;
    },
    logout: (state) => {
      state.login = '';
      state.senha = '';
      fetchLogout();
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loginAsync.rejected, (state, reject) => {
        state.error = reject.error.message;
        state.loading = false;
        logout();
      })
      .addCase(loginAsync.pending, (state) => {
        state.loading = true;
        state.error = undefined;
      })
      .addCase(loginAsync.fulfilled, (state, action) => {
        state.login = action.payload.login;
        state.senha = action.payload.senha;
        state.loading = false;
        state.error = undefined;
      });
  },
});

export const { setLogin, logout } = loginSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectLogin = (state: RootState) => state.auth;

export default loginSlice.reducer;
